@page "/"
<PageTitle>Home</PageTitle>


<div class="container">
    <h1 class="text-center">Maze <i class="bi bi-dpad"></i> Game </h1>
    <h4 class="text-center">[Recursive Backtracking | A* Algorithm ]</h4>
    <hr />

    <EditForm Model="Dimentions" OnValidSubmit="GenerateMaze" FormName="Dimentions">
        <DataAnnotationsValidator />
        <ValidationSummary />
        <div class="d-flex justify-content-center mt-5">
            <div class="d-flex gap-2 justify-content-center w-75">
                <!--WIDTH-->
                <div class="input-group align-self-center w-auto">
                    <span class="input-group-text" id="basic-addon1"><i class="bi bi-arrows"></i></span>
                    <input type="number" @bind="@Dimentions.Width" class="form-control" placeholder="width" aria-label="width" aria-describedby="basic-addon1">
                </div>
                <!--HEIGHT-->
                <div class="input-group align-self-center w-auto">
                    <span class="input-group-text" id="basic-addon1"><i class="bi bi-arrows-vertical"></i></span>
                    <input type="number" @bind="@Dimentions.Height" class="form-control" placeholder="height" aria-label="height" aria-describedby="basic-addon1">
                </div>
                <button type="submit" class="btn btn-outline-success"> Test Recursive Backtracking</button>
                <button type="reset" class="btn btn-outline-warning" @onclick="ResetMaze"> Reset</button>
            </div>
        </div>
    </EditForm>

    <!--THE MAZE-->
    <hr class="mt-5" />
    @if (Maze is not null)
    {
        <div class="maze-container">
            <div class="card">
                <div class="card-body p-1">
                    <div class="maze-grid" style="grid-template-columns: repeat(@Maze.GetLength(1), 15px); grid-template-rows: repeat(@Maze.GetLength(0), 15px);">
                        @for (int i = 0; i < Maze.GetLength(0); i++)
                        {
                            @for (int j = 0; j < Maze.GetLength(1); j++)
                            {
                                var MazeType = Maze[i, j].Type;
                                <div class="maze-cell @(MazeType == Models.MazeModel.CellType.Wall ? "wall-cell" :(MazeType == Models.MazeModel.CellType.solution?"solution-cell": "path-cell"))"></div>
                            }
                        }
                    </div>
                </div>
            </div>
        </div>
    }

    @if (IsLoopCompleted)
    {
        <hr class="mt-5" />
        <div class="d-flex justify-content-center">
            <div class="alert alert-success mt-5 w-25" role="alert">
                <h4 class="alert-heading text-center">Maze Generated!</h4>
            </div>
        </div>
        <div class="d-flex justify-content-center mt-3">
            <button type="button" class="btn btn-outline-warning" @onclick="MazeSolved"> Generate Solution A* Algorithm</button>

        </div>
        <div>
            <p>
                Made by @@ISLAM_SCR.
            </p>
        </div>

    }


</div>
